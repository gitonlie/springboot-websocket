<?xml version="1.0" encoding="UTF-8"?>
<!--
    scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
    scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒；当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration  scan="true" scanPeriod="60 seconds" debug="false">
	<!-- 每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用设置成其他名字，用于区分不同应用程序的记录。
	一旦设置，不能修改,可以通过%contextName来打印日志上下文名称，一般来说我们不用这个属性，可有可无 -->
    <contextName>websocket</contextName>
    
    <!--输出到控制台-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
          <!-- 
          	日志输出格式：
			%d表示日期时间，
			%thread表示线程名，
			%-5level：级别从左显示5个字符宽度
			%logger{50} 表示logger名字最长50个字符，否则按照句点分割。 
			%msg：日志消息，
			%n是换行符
           -->
          <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%15.15thread] %-5level ${PID:- } %-40.40logger{39} : %msg%n</pattern>
        </encoder>
    </appender>
	
    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <appender name="logFile"  class="ch.qos.logback.core.rolling.RollingFileAppender">
    	<!-- 指定当前日志文件的名称以及位置 -->
        <file>/home/websocket.log</file>
         <!--
	                    当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
	        TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern><!-- 往期日志文件的名称以及位置-->
                /home/websocket.%d{yyyy-MM-dd}.log
            </fileNamePattern>
            <!-- 
		            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，
		            且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，
		            那些为了归档而创建的目录也会被删除。
            -->
            <MaxHistory>365</MaxHistory>
        </rollingPolicy>
        <!-- 日志输出格式： -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>
               %d{yyyy-MM-dd HH:mm:ss.SSS} [%15.15thread] %-5level ${PID:- } %-40.40logger{39} : %msg%n
            </Pattern>
        </layout>
    </appender>
	
	<!-- 
		logger主要用于存放日志对象，也可以定义日志类型、级别
		name：表示匹配的logger类型前缀，也就是包的前半部分
		level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
		additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，
		false：表示只用当前logger的appender-ref，true：
		表示当前logger的appender-ref和rootLogger的appender-ref都有效
    -->
	
	<!-- 默认使用这个 -->
	<root level="info">
		<appender-ref ref="console"/>
		<appender-ref ref="logFile"/>
	</root>

    <!-- 特定包采用特定的级别 -->
    <logger name="priv.gitonlie.websocket.configure" level="DEBUG" additivity="false">
        <appender-ref ref="console"/>
        <appender-ref ref="logFile" />
    </logger> 
   

</configuration>
